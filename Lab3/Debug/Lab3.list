
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002acc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf8  08002bf8  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf8  08002bf8  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf8  08002bf8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000038  08002c38  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002c38  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bc3  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5b  00000000  00000000  00029c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f6a  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c157  00000000  00000000  00043b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082391  00000000  00000000  0004fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2082  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d4  00000000  00000000  000d20d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bc0 	.word	0x08002bc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002bc0 	.word	0x08002bc0

0800014c <clearLEDs>:
#include "global.h"
#include "display.h"

int led_buffer[4] = {0, 0, 0, 0};

void clearLEDs(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (index == LEFT_RIGHT){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b01      	cmp	r3, #1
 8000158:	d105      	bne.n	8000166 <clearLEDs+0x1a>
		HAL_GPIO_WritePin(GPIOA, RED_1_Pin|AMBER_1_Pin|GREEN_1_Pin, GPIO_PIN_SET);
 800015a:	2201      	movs	r2, #1
 800015c:	21e0      	movs	r1, #224	; 0xe0
 800015e:	4808      	ldr	r0, [pc, #32]	; (8000180 <clearLEDs+0x34>)
 8000160:	f001 fd05 	bl	8001b6e <HAL_GPIO_WritePin>
	}
	else if (index == TOP_BOTTOM){
		HAL_GPIO_WritePin(GPIOA, RED_2_Pin|AMBER_2_Pin|GREEN_2_Pin, GPIO_PIN_SET);
	}
}
 8000164:	e008      	b.n	8000178 <clearLEDs+0x2c>
	else if (index == TOP_BOTTOM){
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d105      	bne.n	8000178 <clearLEDs+0x2c>
		HAL_GPIO_WritePin(GPIOA, RED_2_Pin|AMBER_2_Pin|GREEN_2_Pin, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000172:	4803      	ldr	r0, [pc, #12]	; (8000180 <clearLEDs+0x34>)
 8000174:	f001 fcfb 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	40010800 	.word	0x40010800

08000184 <clear7SEGs>:

void clear7SEGs(){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG2_3_Pin
 8000188:	2201      	movs	r2, #1
 800018a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800018e:	4802      	ldr	r0, [pc, #8]	; (8000198 <clear7SEGs+0x14>)
 8000190:	f001 fced 	bl	8001b6e <HAL_GPIO_WritePin>
	                          |SEG2_4_Pin|SEG2_5_Pin|SEG2_6_Pin|SEG1_3_Pin
	                          |SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin|SEG2_0_Pin
	                          |SEG2_1_Pin|SEG2_2_Pin, GPIO_PIN_SET);
}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40010c00 	.word	0x40010c00

0800019c <clearEN>:

void clearEN(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80001a6:	4802      	ldr	r0, [pc, #8]	; (80001b0 <clearEN+0x14>)
 80001a8:	f001 fce1 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800

080001b4 <clearAllLEDs>:

void clearAllLEDs(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED_1_Pin|AMBER_1_Pin|GREEN_1_Pin|RED_2_Pin|AMBER_2_Pin|GREEN_2_Pin, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80001be:	4802      	ldr	r0, [pc, #8]	; (80001c8 <clearAllLEDs+0x14>)
 80001c0:	f001 fcd5 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	40010800 	.word	0x40010800

080001cc <blinkLEDs>:

void openAllLEDs(){
	HAL_GPIO_WritePin(GPIOA, RED_1_Pin|AMBER_1_Pin|GREEN_1_Pin|RED_2_Pin|AMBER_2_Pin|GREEN_2_Pin, GPIO_PIN_RESET);
}

void blinkLEDs(int road, int led){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
	if (road == TOP_BOTTOM){
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d11e      	bne.n	800021a <blinkLEDs+0x4e>
		switch(led){
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	2b07      	cmp	r3, #7
 80001e0:	d015      	beq.n	800020e <blinkLEDs+0x42>
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	2b07      	cmp	r3, #7
 80001e6:	dc37      	bgt.n	8000258 <blinkLEDs+0x8c>
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	2b05      	cmp	r3, #5
 80001ec:	d003      	beq.n	80001f6 <blinkLEDs+0x2a>
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	2b06      	cmp	r3, #6
 80001f2:	d006      	beq.n	8000202 <blinkLEDs+0x36>
			break;
		case GREEN:
			HAL_GPIO_TogglePin(GPIOA, GREEN_2_Pin);
			break;
		default:
			break;
 80001f4:	e030      	b.n	8000258 <blinkLEDs+0x8c>
			HAL_GPIO_TogglePin(GPIOA, RED_2_Pin);
 80001f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fa:	481c      	ldr	r0, [pc, #112]	; (800026c <blinkLEDs+0xa0>)
 80001fc:	f001 fccf 	bl	8001b9e <HAL_GPIO_TogglePin>
			break;
 8000200:	e02f      	b.n	8000262 <blinkLEDs+0x96>
			HAL_GPIO_TogglePin(GPIOA, AMBER_2_Pin);
 8000202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000206:	4819      	ldr	r0, [pc, #100]	; (800026c <blinkLEDs+0xa0>)
 8000208:	f001 fcc9 	bl	8001b9e <HAL_GPIO_TogglePin>
			break;
 800020c:	e029      	b.n	8000262 <blinkLEDs+0x96>
			HAL_GPIO_TogglePin(GPIOA, GREEN_2_Pin);
 800020e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000212:	4816      	ldr	r0, [pc, #88]	; (800026c <blinkLEDs+0xa0>)
 8000214:	f001 fcc3 	bl	8001b9e <HAL_GPIO_TogglePin>
			break;
 8000218:	e023      	b.n	8000262 <blinkLEDs+0x96>
		}
	}
	else if (road == LEFT_RIGHT){
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2b01      	cmp	r3, #1
 800021e:	d11d      	bne.n	800025c <blinkLEDs+0x90>
		switch(led){
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	2b07      	cmp	r3, #7
 8000224:	d013      	beq.n	800024e <blinkLEDs+0x82>
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	2b07      	cmp	r3, #7
 800022a:	dc19      	bgt.n	8000260 <blinkLEDs+0x94>
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	2b05      	cmp	r3, #5
 8000230:	d003      	beq.n	800023a <blinkLEDs+0x6e>
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	2b06      	cmp	r3, #6
 8000236:	d005      	beq.n	8000244 <blinkLEDs+0x78>
			break;
		case GREEN:
			HAL_GPIO_TogglePin(GPIOA, GREEN_1_Pin);
			break;
		default:
			break;
 8000238:	e012      	b.n	8000260 <blinkLEDs+0x94>
			HAL_GPIO_TogglePin(GPIOA, RED_1_Pin);
 800023a:	2120      	movs	r1, #32
 800023c:	480b      	ldr	r0, [pc, #44]	; (800026c <blinkLEDs+0xa0>)
 800023e:	f001 fcae 	bl	8001b9e <HAL_GPIO_TogglePin>
			break;
 8000242:	e00e      	b.n	8000262 <blinkLEDs+0x96>
			HAL_GPIO_TogglePin(GPIOA, AMBER_1_Pin);
 8000244:	2140      	movs	r1, #64	; 0x40
 8000246:	4809      	ldr	r0, [pc, #36]	; (800026c <blinkLEDs+0xa0>)
 8000248:	f001 fca9 	bl	8001b9e <HAL_GPIO_TogglePin>
			break;
 800024c:	e009      	b.n	8000262 <blinkLEDs+0x96>
			HAL_GPIO_TogglePin(GPIOA, GREEN_1_Pin);
 800024e:	2180      	movs	r1, #128	; 0x80
 8000250:	4806      	ldr	r0, [pc, #24]	; (800026c <blinkLEDs+0xa0>)
 8000252:	f001 fca4 	bl	8001b9e <HAL_GPIO_TogglePin>
			break;
 8000256:	e004      	b.n	8000262 <blinkLEDs+0x96>
			break;
 8000258:	bf00      	nop
 800025a:	e002      	b.n	8000262 <blinkLEDs+0x96>
		}
	}
 800025c:	bf00      	nop
 800025e:	e000      	b.n	8000262 <blinkLEDs+0x96>
			break;
 8000260:	bf00      	nop
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40010800 	.word	0x40010800

08000270 <setLEDs>:

void setLEDs(int road, int led){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	if (road == TOP_BOTTOM){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d146      	bne.n	800030e <setLEDs+0x9e>
		switch(led){
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	2b07      	cmp	r3, #7
 8000284:	d030      	beq.n	80002e8 <setLEDs+0x78>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	2b07      	cmp	r3, #7
 800028a:	f300 80ca 	bgt.w	8000422 <setLEDs+0x1b2>
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	2b05      	cmp	r3, #5
 8000292:	d003      	beq.n	800029c <setLEDs+0x2c>
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	2b06      	cmp	r3, #6
 8000298:	d013      	beq.n	80002c2 <setLEDs+0x52>
			HAL_GPIO_WritePin(GPIOA, RED_2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, AMBER_2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, GREEN_2_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 800029a:	e0c2      	b.n	8000422 <setLEDs+0x1b2>
			HAL_GPIO_WritePin(GPIOA, RED_2_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a2:	4865      	ldr	r0, [pc, #404]	; (8000438 <setLEDs+0x1c8>)
 80002a4:	f001 fc63 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_2_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ae:	4862      	ldr	r0, [pc, #392]	; (8000438 <setLEDs+0x1c8>)
 80002b0:	f001 fc5d 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_2_Pin, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ba:	485f      	ldr	r0, [pc, #380]	; (8000438 <setLEDs+0x1c8>)
 80002bc:	f001 fc57 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80002c0:	e0b6      	b.n	8000430 <setLEDs+0x1c0>
			HAL_GPIO_WritePin(GPIOA, RED_2_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c8:	485b      	ldr	r0, [pc, #364]	; (8000438 <setLEDs+0x1c8>)
 80002ca:	f001 fc50 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_2_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d4:	4858      	ldr	r0, [pc, #352]	; (8000438 <setLEDs+0x1c8>)
 80002d6:	f001 fc4a 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_2_Pin, GPIO_PIN_SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e0:	4855      	ldr	r0, [pc, #340]	; (8000438 <setLEDs+0x1c8>)
 80002e2:	f001 fc44 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80002e6:	e0a3      	b.n	8000430 <setLEDs+0x1c0>
			HAL_GPIO_WritePin(GPIOA, RED_2_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ee:	4852      	ldr	r0, [pc, #328]	; (8000438 <setLEDs+0x1c8>)
 80002f0:	f001 fc3d 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_2_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002fa:	484f      	ldr	r0, [pc, #316]	; (8000438 <setLEDs+0x1c8>)
 80002fc:	f001 fc37 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_2_Pin, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000306:	484c      	ldr	r0, [pc, #304]	; (8000438 <setLEDs+0x1c8>)
 8000308:	f001 fc31 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800030c:	e090      	b.n	8000430 <setLEDs+0x1c0>
		}
	}
	else if (road == LEFT_RIGHT){
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d13d      	bne.n	8000390 <setLEDs+0x120>
		switch(led){
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	2b07      	cmp	r3, #7
 8000318:	d02a      	beq.n	8000370 <setLEDs+0x100>
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b07      	cmp	r3, #7
 800031e:	f300 8082 	bgt.w	8000426 <setLEDs+0x1b6>
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b05      	cmp	r3, #5
 8000326:	d003      	beq.n	8000330 <setLEDs+0xc0>
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	2b06      	cmp	r3, #6
 800032c:	d010      	beq.n	8000350 <setLEDs+0xe0>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, AMBER_1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 800032e:	e07a      	b.n	8000426 <setLEDs+0x1b6>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2120      	movs	r1, #32
 8000334:	4840      	ldr	r0, [pc, #256]	; (8000438 <setLEDs+0x1c8>)
 8000336:	f001 fc1a 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_1_Pin, GPIO_PIN_SET);
 800033a:	2201      	movs	r2, #1
 800033c:	2140      	movs	r1, #64	; 0x40
 800033e:	483e      	ldr	r0, [pc, #248]	; (8000438 <setLEDs+0x1c8>)
 8000340:	f001 fc15 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2180      	movs	r1, #128	; 0x80
 8000348:	483b      	ldr	r0, [pc, #236]	; (8000438 <setLEDs+0x1c8>)
 800034a:	f001 fc10 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800034e:	e06f      	b.n	8000430 <setLEDs+0x1c0>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2120      	movs	r1, #32
 8000354:	4838      	ldr	r0, [pc, #224]	; (8000438 <setLEDs+0x1c8>)
 8000356:	f001 fc0a 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_1_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	4836      	ldr	r0, [pc, #216]	; (8000438 <setLEDs+0x1c8>)
 8000360:	f001 fc05 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2180      	movs	r1, #128	; 0x80
 8000368:	4833      	ldr	r0, [pc, #204]	; (8000438 <setLEDs+0x1c8>)
 800036a:	f001 fc00 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800036e:	e05f      	b.n	8000430 <setLEDs+0x1c0>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2120      	movs	r1, #32
 8000374:	4830      	ldr	r0, [pc, #192]	; (8000438 <setLEDs+0x1c8>)
 8000376:	f001 fbfa 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_1_Pin, GPIO_PIN_SET);
 800037a:	2201      	movs	r2, #1
 800037c:	2140      	movs	r1, #64	; 0x40
 800037e:	482e      	ldr	r0, [pc, #184]	; (8000438 <setLEDs+0x1c8>)
 8000380:	f001 fbf5 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	482b      	ldr	r0, [pc, #172]	; (8000438 <setLEDs+0x1c8>)
 800038a:	f001 fbf0 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 800038e:	e04f      	b.n	8000430 <setLEDs+0x1c0>
		}
	}
	else if (road == ALL){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b02      	cmp	r3, #2
 8000394:	d149      	bne.n	800042a <setLEDs+0x1ba>
		switch(led){
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	2b07      	cmp	r3, #7
 800039a:	d02f      	beq.n	80003fc <setLEDs+0x18c>
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b07      	cmp	r3, #7
 80003a0:	dc45      	bgt.n	800042e <setLEDs+0x1be>
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b05      	cmp	r3, #5
 80003a6:	d003      	beq.n	80003b0 <setLEDs+0x140>
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	2b06      	cmp	r3, #6
 80003ac:	d013      	beq.n	80003d6 <setLEDs+0x166>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin|RED_2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, AMBER_1_Pin|AMBER_2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|GREEN_2_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 80003ae:	e03e      	b.n	800042e <setLEDs+0x1be>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin|RED_2_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80003b6:	4820      	ldr	r0, [pc, #128]	; (8000438 <setLEDs+0x1c8>)
 80003b8:	f001 fbd9 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_1_Pin|AMBER_2_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80003c2:	481d      	ldr	r0, [pc, #116]	; (8000438 <setLEDs+0x1c8>)
 80003c4:	f001 fbd3 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|GREEN_2_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80003ce:	481a      	ldr	r0, [pc, #104]	; (8000438 <setLEDs+0x1c8>)
 80003d0:	f001 fbcd 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80003d4:	e02c      	b.n	8000430 <setLEDs+0x1c0>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin|RED_2_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80003dc:	4816      	ldr	r0, [pc, #88]	; (8000438 <setLEDs+0x1c8>)
 80003de:	f001 fbc6 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_1_Pin|AMBER_2_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80003e8:	4813      	ldr	r0, [pc, #76]	; (8000438 <setLEDs+0x1c8>)
 80003ea:	f001 fbc0 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|GREEN_2_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80003f4:	4810      	ldr	r0, [pc, #64]	; (8000438 <setLEDs+0x1c8>)
 80003f6:	f001 fbba 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 80003fa:	e019      	b.n	8000430 <setLEDs+0x1c0>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin|RED_2_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000402:	480d      	ldr	r0, [pc, #52]	; (8000438 <setLEDs+0x1c8>)
 8000404:	f001 fbb3 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBER_1_Pin|AMBER_2_Pin, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800040e:	480a      	ldr	r0, [pc, #40]	; (8000438 <setLEDs+0x1c8>)
 8000410:	f001 fbad 	bl	8001b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|GREEN_2_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 6190 	mov.w	r1, #1152	; 0x480
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <setLEDs+0x1c8>)
 800041c:	f001 fba7 	bl	8001b6e <HAL_GPIO_WritePin>
			break;
 8000420:	e006      	b.n	8000430 <setLEDs+0x1c0>
			break;
 8000422:	bf00      	nop
 8000424:	e004      	b.n	8000430 <setLEDs+0x1c0>
			break;
 8000426:	bf00      	nop
 8000428:	e002      	b.n	8000430 <setLEDs+0x1c0>
		}
	}
 800042a:	bf00      	nop
 800042c:	e000      	b.n	8000430 <setLEDs+0x1c0>
			break;
 800042e:	bf00      	nop
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40010800 	.word	0x40010800

0800043c <update7SEG>:

void update7SEG ( int index ) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d856      	bhi.n	80004f8 <update7SEG+0xbc>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <update7SEG+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000461 	.word	0x08000461
 8000454:	08000487 	.word	0x08000487
 8000458:	080004ad 	.word	0x080004ad
 800045c:	080004d3 	.word	0x080004d3
	switch ( index ) {
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000466:	4827      	ldr	r0, [pc, #156]	; (8000504 <update7SEG+0xc8>)
 8000468:	f001 fb81 	bl	8001b6e <HAL_GPIO_WritePin>
			display7SEG(TIMER, led_buffer[0]);
 800046c:	4b26      	ldr	r3, [pc, #152]	; (8000508 <update7SEG+0xcc>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4619      	mov	r1, r3
 8000472:	200b      	movs	r0, #11
 8000474:	f000 f84a 	bl	800050c <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800047e:	4821      	ldr	r0, [pc, #132]	; (8000504 <update7SEG+0xc8>)
 8000480:	f001 fb75 	bl	8001b6e <HAL_GPIO_WritePin>
			break ;
 8000484:	e039      	b.n	80004fa <update7SEG+0xbe>
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 800048c:	481d      	ldr	r0, [pc, #116]	; (8000504 <update7SEG+0xc8>)
 800048e:	f001 fb6e 	bl	8001b6e <HAL_GPIO_WritePin>
			display7SEG(TIMER, led_buffer[1]);
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <update7SEG+0xcc>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	4619      	mov	r1, r3
 8000498:	200b      	movs	r0, #11
 800049a:	f000 f837 	bl	800050c <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a4:	4817      	ldr	r0, [pc, #92]	; (8000504 <update7SEG+0xc8>)
 80004a6:	f001 fb62 	bl	8001b6e <HAL_GPIO_WritePin>
			break ;
 80004aa:	e026      	b.n	80004fa <update7SEG+0xbe>
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN0_Pin|EN3_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 80004b2:	4814      	ldr	r0, [pc, #80]	; (8000504 <update7SEG+0xc8>)
 80004b4:	f001 fb5b 	bl	8001b6e <HAL_GPIO_WritePin>
			display7SEG(MODE, led_buffer[2]);
 80004b8:	4b13      	ldr	r3, [pc, #76]	; (8000508 <update7SEG+0xcc>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	4619      	mov	r1, r3
 80004be:	200a      	movs	r0, #10
 80004c0:	f000 f824 	bl	800050c <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	480e      	ldr	r0, [pc, #56]	; (8000504 <update7SEG+0xc8>)
 80004cc:	f001 fb4f 	bl	8001b6e <HAL_GPIO_WritePin>
			break ;
 80004d0:	e013      	b.n	80004fa <update7SEG+0xbe>
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN0_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <update7SEG+0xc8>)
 80004da:	f001 fb48 	bl	8001b6e <HAL_GPIO_WritePin>
			display7SEG(MODE, led_buffer[3]);
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <update7SEG+0xcc>)
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	4619      	mov	r1, r3
 80004e4:	200a      	movs	r0, #10
 80004e6:	f000 f811 	bl	800050c <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <update7SEG+0xc8>)
 80004f2:	f001 fb3c 	bl	8001b6e <HAL_GPIO_WritePin>
			break ;
 80004f6:	e000      	b.n	80004fa <update7SEG+0xbe>
		default :
			break ;
 80004f8:	bf00      	nop
	}
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010800 	.word	0x40010800
 8000508:	20000054 	.word	0x20000054

0800050c <display7SEG>:

void display7SEG(int section, int counter){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	if (section == TIMER){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b0b      	cmp	r3, #11
 800051a:	d16e      	bne.n	80005fa <display7SEG+0xee>
		if (counter == 0){
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d107      	bne.n	8000532 <display7SEG+0x26>
			clear7SEGs();
 8000522:	f7ff fe2f 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin
 8000526:	2200      	movs	r2, #0
 8000528:	213f      	movs	r1, #63	; 0x3f
 800052a:	4873      	ldr	r0, [pc, #460]	; (80006f8 <display7SEG+0x1ec>)
 800052c:	f001 fb1f 	bl	8001b6e <HAL_GPIO_WritePin>
			clear7SEGs();
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin
									      |SEG2_5_Pin|SEG2_6_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000530:	e0dd      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 1){
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d107      	bne.n	8000548 <display7SEG+0x3c>
			clear7SEGs();
 8000538:	f7ff fe24 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin|SEG1_2_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2106      	movs	r1, #6
 8000540:	486d      	ldr	r0, [pc, #436]	; (80006f8 <display7SEG+0x1ec>)
 8000542:	f001 fb14 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000546:	e0d2      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 2){
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d107      	bne.n	800055e <display7SEG+0x52>
			clear7SEGs();
 800054e:	f7ff fe19 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_3_Pin
 8000552:	2200      	movs	r2, #0
 8000554:	215b      	movs	r1, #91	; 0x5b
 8000556:	4868      	ldr	r0, [pc, #416]	; (80006f8 <display7SEG+0x1ec>)
 8000558:	f001 fb09 	bl	8001b6e <HAL_GPIO_WritePin>
}
 800055c:	e0c7      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 3){
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d107      	bne.n	8000574 <display7SEG+0x68>
			clear7SEGs();
 8000564:	f7ff fe0e 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin
 8000568:	2200      	movs	r2, #0
 800056a:	214f      	movs	r1, #79	; 0x4f
 800056c:	4862      	ldr	r0, [pc, #392]	; (80006f8 <display7SEG+0x1ec>)
 800056e:	f001 fafe 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000572:	e0bc      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 4){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d107      	bne.n	800058a <display7SEG+0x7e>
			clear7SEGs();
 800057a:	f7ff fe03 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin|SEG1_2_Pin|SEG1_5_Pin
 800057e:	2200      	movs	r2, #0
 8000580:	2166      	movs	r1, #102	; 0x66
 8000582:	485d      	ldr	r0, [pc, #372]	; (80006f8 <display7SEG+0x1ec>)
 8000584:	f001 faf3 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000588:	e0b1      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 5){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b05      	cmp	r3, #5
 800058e:	d107      	bne.n	80005a0 <display7SEG+0x94>
			clear7SEGs();
 8000590:	f7ff fdf8 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_2_Pin|SEG1_3_Pin
 8000594:	2200      	movs	r2, #0
 8000596:	216d      	movs	r1, #109	; 0x6d
 8000598:	4857      	ldr	r0, [pc, #348]	; (80006f8 <display7SEG+0x1ec>)
 800059a:	f001 fae8 	bl	8001b6e <HAL_GPIO_WritePin>
}
 800059e:	e0a6      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 6){
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d107      	bne.n	80005b6 <display7SEG+0xaa>
			clear7SEGs();
 80005a6:	f7ff fded 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_2_Pin|SEG1_3_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	217d      	movs	r1, #125	; 0x7d
 80005ae:	4852      	ldr	r0, [pc, #328]	; (80006f8 <display7SEG+0x1ec>)
 80005b0:	f001 fadd 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80005b4:	e09b      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 7){
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	2b07      	cmp	r3, #7
 80005ba:	d107      	bne.n	80005cc <display7SEG+0xc0>
			clear7SEGs();
 80005bc:	f7ff fde2 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2107      	movs	r1, #7
 80005c4:	484c      	ldr	r0, [pc, #304]	; (80006f8 <display7SEG+0x1ec>)
 80005c6:	f001 fad2 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80005ca:	e090      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 8){
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	d107      	bne.n	80005e2 <display7SEG+0xd6>
			clear7SEGs();
 80005d2:	f7ff fdd7 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin
 80005d6:	2200      	movs	r2, #0
 80005d8:	217f      	movs	r1, #127	; 0x7f
 80005da:	4847      	ldr	r0, [pc, #284]	; (80006f8 <display7SEG+0x1ec>)
 80005dc:	f001 fac7 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80005e0:	e085      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 9){
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b09      	cmp	r3, #9
 80005e6:	f040 8082 	bne.w	80006ee <display7SEG+0x1e2>
			clear7SEGs();
 80005ea:	f7ff fdcb 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin
 80005ee:	2200      	movs	r2, #0
 80005f0:	216f      	movs	r1, #111	; 0x6f
 80005f2:	4841      	ldr	r0, [pc, #260]	; (80006f8 <display7SEG+0x1ec>)
 80005f4:	f001 fabb 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80005f8:	e079      	b.n	80006ee <display7SEG+0x1e2>
	else if (section == MODE){
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0a      	cmp	r3, #10
 80005fe:	d176      	bne.n	80006ee <display7SEG+0x1e2>
		if (counter == 0){
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d108      	bne.n	8000618 <display7SEG+0x10c>
			clear7SEGs();
 8000606:	f7ff fdbd 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000610:	4839      	ldr	r0, [pc, #228]	; (80006f8 <display7SEG+0x1ec>)
 8000612:	f001 faac 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000616:	e06a      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 1){
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d108      	bne.n	8000630 <display7SEG+0x124>
			clear7SEGs();
 800061e:	f7ff fdb1 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_1_Pin|SEG2_2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000628:	4833      	ldr	r0, [pc, #204]	; (80006f8 <display7SEG+0x1ec>)
 800062a:	f001 faa0 	bl	8001b6e <HAL_GPIO_WritePin>
}
 800062e:	e05e      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 2){
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2b02      	cmp	r3, #2
 8000634:	d108      	bne.n	8000648 <display7SEG+0x13c>
			clear7SEGs();
 8000636:	f7ff fda5 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_1_Pin|SEG2_3_Pin
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 8000640:	482d      	ldr	r0, [pc, #180]	; (80006f8 <display7SEG+0x1ec>)
 8000642:	f001 fa94 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000646:	e052      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 3){
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d108      	bne.n	8000660 <display7SEG+0x154>
			clear7SEGs();
 800064e:	f7ff fd99 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8000658:	4827      	ldr	r0, [pc, #156]	; (80006f8 <display7SEG+0x1ec>)
 800065a:	f001 fa88 	bl	8001b6e <HAL_GPIO_WritePin>
}
 800065e:	e046      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 4){
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2b04      	cmp	r3, #4
 8000664:	d108      	bne.n	8000678 <display7SEG+0x16c>
			clear7SEGs();
 8000666:	f7ff fd8d 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_1_Pin|SEG2_2_Pin|SEG2_5_Pin
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8000670:	4821      	ldr	r0, [pc, #132]	; (80006f8 <display7SEG+0x1ec>)
 8000672:	f001 fa7c 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000676:	e03a      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 5){
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2b05      	cmp	r3, #5
 800067c:	d108      	bne.n	8000690 <display7SEG+0x184>
			clear7SEGs();
 800067e:	f7ff fd81 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_2_Pin|SEG2_3_Pin
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000688:	481b      	ldr	r0, [pc, #108]	; (80006f8 <display7SEG+0x1ec>)
 800068a:	f001 fa70 	bl	8001b6e <HAL_GPIO_WritePin>
}
 800068e:	e02e      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 6){
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2b06      	cmp	r3, #6
 8000694:	d108      	bne.n	80006a8 <display7SEG+0x19c>
			clear7SEGs();
 8000696:	f7ff fd75 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_2_Pin|SEG2_3_Pin
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80006a0:	4815      	ldr	r0, [pc, #84]	; (80006f8 <display7SEG+0x1ec>)
 80006a2:	f001 fa64 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80006a6:	e022      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 7){
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	d108      	bne.n	80006c0 <display7SEG+0x1b4>
			clear7SEGs();
 80006ae:	f7ff fd69 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7160 	mov.w	r1, #896	; 0x380
 80006b8:	480f      	ldr	r0, [pc, #60]	; (80006f8 <display7SEG+0x1ec>)
 80006ba:	f001 fa58 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80006be:	e016      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 8){
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2b08      	cmp	r3, #8
 80006c4:	d108      	bne.n	80006d8 <display7SEG+0x1cc>
			clear7SEGs();
 80006c6:	f7ff fd5d 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <display7SEG+0x1ec>)
 80006d2:	f001 fa4c 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80006d6:	e00a      	b.n	80006ee <display7SEG+0x1e2>
		else if (counter == 9){
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	2b09      	cmp	r3, #9
 80006dc:	d107      	bne.n	80006ee <display7SEG+0x1e2>
			clear7SEGs();
 80006de:	f7ff fd51 	bl	8000184 <clear7SEGs>
			HAL_GPIO_WritePin(GPIOB, SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <display7SEG+0x1ec>)
 80006ea:	f001 fa40 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40010c00 	.word	0x40010c00

080006fc <updateBuffer>:

void updateBuffer(int timer, int mode){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	led_buffer[0] = timer / 10;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a18      	ldr	r2, [pc, #96]	; (800076c <updateBuffer+0x70>)
 800070a:	fb82 1203 	smull	r1, r2, r2, r3
 800070e:	1092      	asrs	r2, r2, #2
 8000710:	17db      	asrs	r3, r3, #31
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	4a16      	ldr	r2, [pc, #88]	; (8000770 <updateBuffer+0x74>)
 8000716:	6013      	str	r3, [r2, #0]
	led_buffer[1] = timer % 10;
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <updateBuffer+0x70>)
 800071c:	fb83 2301 	smull	r2, r3, r3, r1
 8000720:	109a      	asrs	r2, r3, #2
 8000722:	17cb      	asrs	r3, r1, #31
 8000724:	1ad2      	subs	r2, r2, r3
 8000726:	4613      	mov	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	1aca      	subs	r2, r1, r3
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <updateBuffer+0x74>)
 8000732:	605a      	str	r2, [r3, #4]
	led_buffer[2] = mode / 10;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	4a0d      	ldr	r2, [pc, #52]	; (800076c <updateBuffer+0x70>)
 8000738:	fb82 1203 	smull	r1, r2, r2, r3
 800073c:	1092      	asrs	r2, r2, #2
 800073e:	17db      	asrs	r3, r3, #31
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <updateBuffer+0x74>)
 8000744:	6093      	str	r3, [r2, #8]
	led_buffer[3] = mode % 10;
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <updateBuffer+0x70>)
 800074a:	fb83 2301 	smull	r2, r3, r3, r1
 800074e:	109a      	asrs	r2, r3, #2
 8000750:	17cb      	asrs	r3, r1, #31
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	1aca      	subs	r2, r1, r3
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <updateBuffer+0x74>)
 8000760:	60da      	str	r2, [r3, #12]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	66666667 	.word	0x66666667
 8000770:	20000054 	.word	0x20000054

08000774 <fsm_automatic_run>:
#include "global.h"
#include "fsm_automatic.h"

int flagAmber = 0;

void fsm_automatic_run(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	switch(status){
 8000778:	4b9a      	ldr	r3, [pc, #616]	; (80009e4 <fsm_automatic_run+0x270>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b03      	subs	r3, #3
 800077e:	2b04      	cmp	r3, #4
 8000780:	f200 8226 	bhi.w	8000bd0 <fsm_automatic_run+0x45c>
 8000784:	a201      	add	r2, pc, #4	; (adr r2, 800078c <fsm_automatic_run+0x18>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	080007a1 	.word	0x080007a1
 8000790:	08000807 	.word	0x08000807
 8000794:	080008af 	.word	0x080008af
 8000798:	08000a11 	.word	0x08000a11
 800079c:	08000af7 	.word	0x08000af7
		case INIT:
			red_s = red_duration/1000;
 80007a0:	4b91      	ldr	r3, [pc, #580]	; (80009e8 <fsm_automatic_run+0x274>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a91      	ldr	r2, [pc, #580]	; (80009ec <fsm_automatic_run+0x278>)
 80007a6:	fb82 1203 	smull	r1, r2, r2, r3
 80007aa:	1192      	asrs	r2, r2, #6
 80007ac:	17db      	asrs	r3, r3, #31
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	4a8f      	ldr	r2, [pc, #572]	; (80009f0 <fsm_automatic_run+0x27c>)
 80007b2:	6013      	str	r3, [r2, #0]
			amber_s = amber_duration/1000;
 80007b4:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <fsm_automatic_run+0x280>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a8c      	ldr	r2, [pc, #560]	; (80009ec <fsm_automatic_run+0x278>)
 80007ba:	fb82 1203 	smull	r1, r2, r2, r3
 80007be:	1192      	asrs	r2, r2, #6
 80007c0:	17db      	asrs	r3, r3, #31
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	4a8c      	ldr	r2, [pc, #560]	; (80009f8 <fsm_automatic_run+0x284>)
 80007c6:	6013      	str	r3, [r2, #0]
			green_s = green_duration/1000;
 80007c8:	4b8c      	ldr	r3, [pc, #560]	; (80009fc <fsm_automatic_run+0x288>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a87      	ldr	r2, [pc, #540]	; (80009ec <fsm_automatic_run+0x278>)
 80007ce:	fb82 1203 	smull	r1, r2, r2, r3
 80007d2:	1192      	asrs	r2, r2, #6
 80007d4:	17db      	asrs	r3, r3, #31
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	4a89      	ldr	r2, [pc, #548]	; (8000a00 <fsm_automatic_run+0x28c>)
 80007da:	6013      	str	r3, [r2, #0]
			clear7SEGs();
 80007dc:	f7ff fcd2 	bl	8000184 <clear7SEGs>
			clearEN();
 80007e0:	f7ff fcdc 	bl	800019c <clearEN>
			clearLEDs(TOP_BOTTOM);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff fcb1 	bl	800014c <clearLEDs>
			clearLEDs(LEFT_RIGHT);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fcae 	bl	800014c <clearLEDs>
			if (isButtonPressed(0)){
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fbcb 	bl	8000f8c <isButtonPressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f000 81eb 	beq.w	8000bd4 <fsm_automatic_run+0x460>
				status = NORMAL;
 80007fe:	4b79      	ldr	r3, [pc, #484]	; (80009e4 <fsm_automatic_run+0x270>)
 8000800:	2204      	movs	r2, #4
 8000802:	601a      	str	r2, [r3, #0]
			}
			break;
 8000804:	e1e6      	b.n	8000bd4 <fsm_automatic_run+0x460>
		case NORMAL:
			flagAmber = 0;
 8000806:	4b7f      	ldr	r3, [pc, #508]	; (8000a04 <fsm_automatic_run+0x290>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
			status = RED;
 800080c:	4b75      	ldr	r3, [pc, #468]	; (80009e4 <fsm_automatic_run+0x270>)
 800080e:	2205      	movs	r2, #5
 8000810:	601a      	str	r2, [r3, #0]
			clearLEDs(TOP_BOTTOM);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fc9a 	bl	800014c <clearLEDs>
			clearLEDs(LEFT_RIGHT);
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff fc97 	bl	800014c <clearLEDs>
			setTimer(TOP_BOTTOM, red_duration);
 800081e:	4b72      	ldr	r3, [pc, #456]	; (80009e8 <fsm_automatic_run+0x274>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4619      	mov	r1, r3
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fd3f 	bl	80012a8 <setTimer>
			setTimer(LEFT_RIGHT, green_duration);
 800082a:	4b74      	ldr	r3, [pc, #464]	; (80009fc <fsm_automatic_run+0x288>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4619      	mov	r1, r3
 8000830:	2001      	movs	r0, #1
 8000832:	f000 fd39 	bl	80012a8 <setTimer>
			updateBuffer(red_s, 1);
 8000836:	4b6e      	ldr	r3, [pc, #440]	; (80009f0 <fsm_automatic_run+0x27c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff5d 	bl	80006fc <updateBuffer>
			setTimerSecond(1000);
 8000842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000846:	f000 fd13 	bl	8001270 <setTimerSecond>
			setTimer7SEG(50);
 800084a:	2032      	movs	r0, #50	; 0x32
 800084c:	f000 fcf4 	bl	8001238 <setTimer7SEG>
			if (isButtonPressed(0)){
 8000850:	2000      	movs	r0, #0
 8000852:	f000 fb9b 	bl	8000f8c <isButtonPressed>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	f000 81bd 	beq.w	8000bd8 <fsm_automatic_run+0x464>
				clearAllLEDs();
 800085e:	f7ff fca9 	bl	80001b4 <clearAllLEDs>
				status = RED_MOD;
 8000862:	4b60      	ldr	r3, [pc, #384]	; (80009e4 <fsm_automatic_run+0x270>)
 8000864:	220f      	movs	r2, #15
 8000866:	601a      	str	r2, [r3, #0]
				red_s = red_duration/1000;
 8000868:	4b5f      	ldr	r3, [pc, #380]	; (80009e8 <fsm_automatic_run+0x274>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a5f      	ldr	r2, [pc, #380]	; (80009ec <fsm_automatic_run+0x278>)
 800086e:	fb82 1203 	smull	r1, r2, r2, r3
 8000872:	1192      	asrs	r2, r2, #6
 8000874:	17db      	asrs	r3, r3, #31
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	4a5d      	ldr	r2, [pc, #372]	; (80009f0 <fsm_automatic_run+0x27c>)
 800087a:	6013      	str	r3, [r2, #0]
				updateBuffer(red_s, 2);
 800087c:	4b5c      	ldr	r3, [pc, #368]	; (80009f0 <fsm_automatic_run+0x27c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2102      	movs	r1, #2
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff3a 	bl	80006fc <updateBuffer>
				setLEDs(TOP_BOTTOM, RED);
 8000888:	2105      	movs	r1, #5
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff fcf0 	bl	8000270 <setLEDs>
				setLEDs(LEFT_RIGHT, RED);
 8000890:	2105      	movs	r1, #5
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff fcec 	bl	8000270 <setLEDs>
				setTimer(TOP_BOTTOM, 500);
 8000898:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800089c:	2000      	movs	r0, #0
 800089e:	f000 fd03 	bl	80012a8 <setTimer>
				setTimer(LEFT_RIGHT, 500);
 80008a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fcfe 	bl	80012a8 <setTimer>
			}
			break;
 80008ac:	e194      	b.n	8000bd8 <fsm_automatic_run+0x464>
		case RED:
			setLEDs(TOP_BOTTOM, RED);
 80008ae:	2105      	movs	r1, #5
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fcdd 	bl	8000270 <setLEDs>
			if (flagAmber == 0) setLEDs(LEFT_RIGHT, GREEN);
 80008b6:	4b53      	ldr	r3, [pc, #332]	; (8000a04 <fsm_automatic_run+0x290>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d104      	bne.n	80008c8 <fsm_automatic_run+0x154>
 80008be:	2107      	movs	r1, #7
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff fcd5 	bl	8000270 <setLEDs>
 80008c6:	e007      	b.n	80008d8 <fsm_automatic_run+0x164>
			else if (flagAmber == 1){
 80008c8:	4b4e      	ldr	r3, [pc, #312]	; (8000a04 <fsm_automatic_run+0x290>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d103      	bne.n	80008d8 <fsm_automatic_run+0x164>
				setLEDs(LEFT_RIGHT, AMBER);
 80008d0:	2106      	movs	r1, #6
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fccc 	bl	8000270 <setLEDs>
			}
			if (timerFlag[LEFT_RIGHT] == 1){
 80008d8:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <fsm_automatic_run+0x294>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10f      	bne.n	8000900 <fsm_automatic_run+0x18c>
				flagAmber = 1;
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <fsm_automatic_run+0x290>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
				clearLEDs(LEFT_RIGHT);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fc30 	bl	800014c <clearLEDs>
				setLEDs(LEFT_RIGHT, AMBER);
 80008ec:	2106      	movs	r1, #6
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff fcbe 	bl	8000270 <setLEDs>
				setTimer(LEFT_RIGHT, amber_duration);
 80008f4:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <fsm_automatic_run+0x280>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 fcd4 	bl	80012a8 <setTimer>
			}
			if (timerFlag[TOP_BOTTOM] == 1){
 8000900:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <fsm_automatic_run+0x294>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d12b      	bne.n	8000960 <fsm_automatic_run+0x1ec>
				clearLEDs(TOP_BOTTOM);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fc1f 	bl	800014c <clearLEDs>
				setTimer(TOP_BOTTOM, green_duration);
 800090e:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <fsm_automatic_run+0x288>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fcc7 	bl	80012a8 <setTimer>
				status = GREEN;
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <fsm_automatic_run+0x270>)
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
				clearLEDs(LEFT_RIGHT);
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fc13 	bl	800014c <clearLEDs>
				setTimer(LEFT_RIGHT, red_duration);
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <fsm_automatic_run+0x274>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4619      	mov	r1, r3
 800092c:	2001      	movs	r0, #1
 800092e:	f000 fcbb 	bl	80012a8 <setTimer>
				flagAmber = 0;
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <fsm_automatic_run+0x290>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
				red_s = red_duration/1000;
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <fsm_automatic_run+0x274>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <fsm_automatic_run+0x278>)
 800093e:	fb82 1203 	smull	r1, r2, r2, r3
 8000942:	1192      	asrs	r2, r2, #6
 8000944:	17db      	asrs	r3, r3, #31
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <fsm_automatic_run+0x27c>)
 800094a:	6013      	str	r3, [r2, #0]
				updateBuffer(green_s, 1);
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <fsm_automatic_run+0x28c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fed2 	bl	80006fc <updateBuffer>
				setTimerSecond(1000);
 8000958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095c:	f000 fc88 	bl	8001270 <setTimerSecond>
			}
			if (timerSecond == 1){
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <fsm_automatic_run+0x298>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d10e      	bne.n	8000986 <fsm_automatic_run+0x212>
				updateBuffer(--red_s, 1);
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <fsm_automatic_run+0x27c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <fsm_automatic_run+0x27c>)
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <fsm_automatic_run+0x27c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2101      	movs	r1, #1
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff febf 	bl	80006fc <updateBuffer>
				setTimerSecond(1000);
 800097e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000982:	f000 fc75 	bl	8001270 <setTimerSecond>
			}
			if (isButtonPressed(0)){
 8000986:	2000      	movs	r0, #0
 8000988:	f000 fb00 	bl	8000f8c <isButtonPressed>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 8124 	beq.w	8000bdc <fsm_automatic_run+0x468>
				clearAllLEDs();
 8000994:	f7ff fc0e 	bl	80001b4 <clearAllLEDs>
				status = RED_MOD;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <fsm_automatic_run+0x270>)
 800099a:	220f      	movs	r2, #15
 800099c:	601a      	str	r2, [r3, #0]
				red_s = red_duration/1000;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <fsm_automatic_run+0x274>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <fsm_automatic_run+0x278>)
 80009a4:	fb82 1203 	smull	r1, r2, r2, r3
 80009a8:	1192      	asrs	r2, r2, #6
 80009aa:	17db      	asrs	r3, r3, #31
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <fsm_automatic_run+0x27c>)
 80009b0:	6013      	str	r3, [r2, #0]
				updateBuffer(red_s, 2);
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <fsm_automatic_run+0x27c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2102      	movs	r1, #2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe9f 	bl	80006fc <updateBuffer>
				setLEDs(TOP_BOTTOM, RED);
 80009be:	2105      	movs	r1, #5
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fc55 	bl	8000270 <setLEDs>
				setLEDs(LEFT_RIGHT, RED);
 80009c6:	2105      	movs	r1, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fc51 	bl	8000270 <setLEDs>
				setTimer(TOP_BOTTOM, 500);
 80009ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 fc68 	bl	80012a8 <setTimer>
				setTimer(LEFT_RIGHT, 500);
 80009d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 fc63 	bl	80012a8 <setTimer>
			}
			break;
 80009e2:	e0fb      	b.n	8000bdc <fsm_automatic_run+0x468>
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000004 	.word	0x20000004
 80009ec:	10624dd3 	.word	0x10624dd3
 80009f0:	200000b0 	.word	0x200000b0
 80009f4:	20000008 	.word	0x20000008
 80009f8:	200000ac 	.word	0x200000ac
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	200000b4 	.word	0x200000b4
 8000a04:	20000064 	.word	0x20000064
 8000a08:	2000009c 	.word	0x2000009c
 8000a0c:	20000094 	.word	0x20000094
		case AMBER:
			setLEDs(TOP_BOTTOM, AMBER);
 8000a10:	2106      	movs	r1, #6
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fc2c 	bl	8000270 <setLEDs>
			if (timerFlag[TOP_BOTTOM] == 1){
 8000a18:	4b74      	ldr	r3, [pc, #464]	; (8000bec <fsm_automatic_run+0x478>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d128      	bne.n	8000a72 <fsm_automatic_run+0x2fe>
				clearLEDs(TOP_BOTTOM);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fb93 	bl	800014c <clearLEDs>
				setTimer(TOP_BOTTOM, red_duration);
 8000a26:	4b72      	ldr	r3, [pc, #456]	; (8000bf0 <fsm_automatic_run+0x47c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fc3b 	bl	80012a8 <setTimer>
				status = RED;
 8000a32:	4b70      	ldr	r3, [pc, #448]	; (8000bf4 <fsm_automatic_run+0x480>)
 8000a34:	2205      	movs	r2, #5
 8000a36:	601a      	str	r2, [r3, #0]
				clearLEDs(LEFT_RIGHT);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fb87 	bl	800014c <clearLEDs>
				setTimer(LEFT_RIGHT, green_duration);
 8000a3e:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <fsm_automatic_run+0x484>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fc2f 	bl	80012a8 <setTimer>
				amber_s = amber_duration/1000;
 8000a4a:	4b6c      	ldr	r3, [pc, #432]	; (8000bfc <fsm_automatic_run+0x488>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a6c      	ldr	r2, [pc, #432]	; (8000c00 <fsm_automatic_run+0x48c>)
 8000a50:	fb82 1203 	smull	r1, r2, r2, r3
 8000a54:	1192      	asrs	r2, r2, #6
 8000a56:	17db      	asrs	r3, r3, #31
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	4a6a      	ldr	r2, [pc, #424]	; (8000c04 <fsm_automatic_run+0x490>)
 8000a5c:	6013      	str	r3, [r2, #0]
				updateBuffer(red_s, 1);
 8000a5e:	4b6a      	ldr	r3, [pc, #424]	; (8000c08 <fsm_automatic_run+0x494>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2101      	movs	r1, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe49 	bl	80006fc <updateBuffer>
				setTimerSecond(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f000 fbff 	bl	8001270 <setTimerSecond>
			}
			if (timerSecond == 1){
 8000a72:	4b66      	ldr	r3, [pc, #408]	; (8000c0c <fsm_automatic_run+0x498>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d10e      	bne.n	8000a98 <fsm_automatic_run+0x324>
				updateBuffer(--amber_s, 1);
 8000a7a:	4b62      	ldr	r3, [pc, #392]	; (8000c04 <fsm_automatic_run+0x490>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	4a60      	ldr	r2, [pc, #384]	; (8000c04 <fsm_automatic_run+0x490>)
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b5f      	ldr	r3, [pc, #380]	; (8000c04 <fsm_automatic_run+0x490>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe36 	bl	80006fc <updateBuffer>
				setTimerSecond(1000);
 8000a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a94:	f000 fbec 	bl	8001270 <setTimerSecond>
			}
			if (isButtonPressed(0)){
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 fa77 	bl	8000f8c <isButtonPressed>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 809d 	beq.w	8000be0 <fsm_automatic_run+0x46c>
				clearAllLEDs();
 8000aa6:	f7ff fb85 	bl	80001b4 <clearAllLEDs>
				status = RED_MOD;
 8000aaa:	4b52      	ldr	r3, [pc, #328]	; (8000bf4 <fsm_automatic_run+0x480>)
 8000aac:	220f      	movs	r2, #15
 8000aae:	601a      	str	r2, [r3, #0]
				red_s = red_duration/1000;
 8000ab0:	4b4f      	ldr	r3, [pc, #316]	; (8000bf0 <fsm_automatic_run+0x47c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a52      	ldr	r2, [pc, #328]	; (8000c00 <fsm_automatic_run+0x48c>)
 8000ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aba:	1192      	asrs	r2, r2, #6
 8000abc:	17db      	asrs	r3, r3, #31
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	4a51      	ldr	r2, [pc, #324]	; (8000c08 <fsm_automatic_run+0x494>)
 8000ac2:	6013      	str	r3, [r2, #0]
				updateBuffer(red_s, 2);
 8000ac4:	4b50      	ldr	r3, [pc, #320]	; (8000c08 <fsm_automatic_run+0x494>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe16 	bl	80006fc <updateBuffer>
				setLEDs(TOP_BOTTOM, RED);
 8000ad0:	2105      	movs	r1, #5
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fbcc 	bl	8000270 <setLEDs>
				setLEDs(LEFT_RIGHT, RED);
 8000ad8:	2105      	movs	r1, #5
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fbc8 	bl	8000270 <setLEDs>
				setTimer(TOP_BOTTOM, 500);
 8000ae0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fbdf 	bl	80012a8 <setTimer>
				setTimer(LEFT_RIGHT, 500);
 8000aea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 fbda 	bl	80012a8 <setTimer>
			}
			break;
 8000af4:	e074      	b.n	8000be0 <fsm_automatic_run+0x46c>
		case GREEN:
			setLEDs(TOP_BOTTOM, GREEN);
 8000af6:	2107      	movs	r1, #7
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff fbb9 	bl	8000270 <setLEDs>
			setLEDs(LEFT_RIGHT, RED);
 8000afe:	2105      	movs	r1, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff fbb5 	bl	8000270 <setLEDs>
			if (timerFlag[TOP_BOTTOM] == 1){
 8000b06:	4b39      	ldr	r3, [pc, #228]	; (8000bec <fsm_automatic_run+0x478>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d11f      	bne.n	8000b4e <fsm_automatic_run+0x3da>
				clearLEDs(TOP_BOTTOM);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fb1c 	bl	800014c <clearLEDs>
				setTimer(TOP_BOTTOM, amber_duration);
 8000b14:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <fsm_automatic_run+0x488>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 fbc4 	bl	80012a8 <setTimer>
				status = AMBER;
 8000b20:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <fsm_automatic_run+0x480>)
 8000b22:	2206      	movs	r2, #6
 8000b24:	601a      	str	r2, [r3, #0]
				green_s = green_duration/1000;
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <fsm_automatic_run+0x484>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a35      	ldr	r2, [pc, #212]	; (8000c00 <fsm_automatic_run+0x48c>)
 8000b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b30:	1192      	asrs	r2, r2, #6
 8000b32:	17db      	asrs	r3, r3, #31
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <fsm_automatic_run+0x49c>)
 8000b38:	6013      	str	r3, [r2, #0]
				updateBuffer(amber_s, 1);
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <fsm_automatic_run+0x490>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fddb 	bl	80006fc <updateBuffer>
				setTimerSecond(1000);
 8000b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b4a:	f000 fb91 	bl	8001270 <setTimerSecond>
			}
			if (timerSecond == 1){
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <fsm_automatic_run+0x498>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d10e      	bne.n	8000b74 <fsm_automatic_run+0x400>
				updateBuffer(--green_s, 1);
 8000b56:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <fsm_automatic_run+0x49c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	; (8000c10 <fsm_automatic_run+0x49c>)
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <fsm_automatic_run+0x49c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fdc8 	bl	80006fc <updateBuffer>
				setTimerSecond(1000);
 8000b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b70:	f000 fb7e 	bl	8001270 <setTimerSecond>
			}
			if (isButtonPressed(0)){
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 fa09 	bl	8000f8c <isButtonPressed>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d031      	beq.n	8000be4 <fsm_automatic_run+0x470>
				clearAllLEDs();
 8000b80:	f7ff fb18 	bl	80001b4 <clearAllLEDs>
				status = RED_MOD;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <fsm_automatic_run+0x480>)
 8000b86:	220f      	movs	r2, #15
 8000b88:	601a      	str	r2, [r3, #0]
				red_s = red_duration/1000;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <fsm_automatic_run+0x47c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <fsm_automatic_run+0x48c>)
 8000b90:	fb82 1203 	smull	r1, r2, r2, r3
 8000b94:	1192      	asrs	r2, r2, #6
 8000b96:	17db      	asrs	r3, r3, #31
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <fsm_automatic_run+0x494>)
 8000b9c:	6013      	str	r3, [r2, #0]
				updateBuffer(red_s, 2);
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <fsm_automatic_run+0x494>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fda9 	bl	80006fc <updateBuffer>
				setLEDs(TOP_BOTTOM, RED);
 8000baa:	2105      	movs	r1, #5
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fb5f 	bl	8000270 <setLEDs>
				setLEDs(LEFT_RIGHT, RED);
 8000bb2:	2105      	movs	r1, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fb5b 	bl	8000270 <setLEDs>
				setTimer(TOP_BOTTOM, 500);
 8000bba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fb72 	bl	80012a8 <setTimer>
				setTimer(LEFT_RIGHT, 500);
 8000bc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 fb6d 	bl	80012a8 <setTimer>
			}
			break;
 8000bce:	e009      	b.n	8000be4 <fsm_automatic_run+0x470>
		default:
			break;
 8000bd0:	bf00      	nop
 8000bd2:	e008      	b.n	8000be6 <fsm_automatic_run+0x472>
			break;
 8000bd4:	bf00      	nop
 8000bd6:	e006      	b.n	8000be6 <fsm_automatic_run+0x472>
			break;
 8000bd8:	bf00      	nop
 8000bda:	e004      	b.n	8000be6 <fsm_automatic_run+0x472>
			break;
 8000bdc:	bf00      	nop
 8000bde:	e002      	b.n	8000be6 <fsm_automatic_run+0x472>
			break;
 8000be0:	bf00      	nop
 8000be2:	e000      	b.n	8000be6 <fsm_automatic_run+0x472>
			break;
 8000be4:	bf00      	nop
	}
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000009c 	.word	0x2000009c
 8000bf0:	20000004 	.word	0x20000004
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	10624dd3 	.word	0x10624dd3
 8000c04:	200000ac 	.word	0x200000ac
 8000c08:	200000b0 	.word	0x200000b0
 8000c0c:	20000094 	.word	0x20000094
 8000c10:	200000b4 	.word	0x200000b4

08000c14 <fsm_manual_run>:
 *      Author: Minh Duc Quach
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	switch(status){
 8000c18:	4b95      	ldr	r3, [pc, #596]	; (8000e70 <fsm_manual_run+0x25c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b11      	cmp	r3, #17
 8000c1e:	f000 80d1 	beq.w	8000dc4 <fsm_manual_run+0x1b0>
 8000c22:	2b11      	cmp	r3, #17
 8000c24:	f300 811a 	bgt.w	8000e5c <fsm_manual_run+0x248>
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d002      	beq.n	8000c32 <fsm_manual_run+0x1e>
 8000c2c:	2b10      	cmp	r3, #16
 8000c2e:	d065      	beq.n	8000cfc <fsm_manual_run+0xe8>
		if (isButtonPressed(2)){
			green_duration = green_s * 1000;
		}
		break;
	default:
		break;
 8000c30:	e114      	b.n	8000e5c <fsm_manual_run+0x248>
		if (timerFlag[TOP_BOTTOM] == 1){
 8000c32:	4b90      	ldr	r3, [pc, #576]	; (8000e74 <fsm_manual_run+0x260>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d108      	bne.n	8000c4c <fsm_manual_run+0x38>
			blinkLEDs(TOP_BOTTOM, RED);
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fac5 	bl	80001cc <blinkLEDs>
			setTimer(TOP_BOTTOM, 500);
 8000c42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fb2e 	bl	80012a8 <setTimer>
		if (timerFlag[LEFT_RIGHT] == 1){
 8000c4c:	4b89      	ldr	r3, [pc, #548]	; (8000e74 <fsm_manual_run+0x260>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d108      	bne.n	8000c66 <fsm_manual_run+0x52>
			blinkLEDs(LEFT_RIGHT, RED);
 8000c54:	2105      	movs	r1, #5
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fab8 	bl	80001cc <blinkLEDs>
			setTimer(LEFT_RIGHT, 500);
 8000c5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 fb21 	bl	80012a8 <setTimer>
		if (isButtonPressed(0)){
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f990 	bl	8000f8c <isButtonPressed>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d01c      	beq.n	8000cac <fsm_manual_run+0x98>
			clearAllLEDs();
 8000c72:	f7ff fa9f 	bl	80001b4 <clearAllLEDs>
			status = AMBER_MOD;
 8000c76:	4b7e      	ldr	r3, [pc, #504]	; (8000e70 <fsm_manual_run+0x25c>)
 8000c78:	2210      	movs	r2, #16
 8000c7a:	601a      	str	r2, [r3, #0]
			updateBuffer(amber_s, 3);
 8000c7c:	4b7e      	ldr	r3, [pc, #504]	; (8000e78 <fsm_manual_run+0x264>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2103      	movs	r1, #3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd3a 	bl	80006fc <updateBuffer>
			setLEDs(TOP_BOTTOM, AMBER);
 8000c88:	2106      	movs	r1, #6
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff faf0 	bl	8000270 <setLEDs>
			setLEDs(LEFT_RIGHT, AMBER);
 8000c90:	2106      	movs	r1, #6
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff faec 	bl	8000270 <setLEDs>
			setTimer(TOP_BOTTOM, 500);
 8000c98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f000 fb03 	bl	80012a8 <setTimer>
			setTimer(LEFT_RIGHT, 500);
 8000ca2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 fafe 	bl	80012a8 <setTimer>
		if (isButtonPressed(1)){
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 f96d 	bl	8000f8c <isButtonPressed>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d011      	beq.n	8000cdc <fsm_manual_run+0xc8>
			red_s++;
 8000cb8:	4b70      	ldr	r3, [pc, #448]	; (8000e7c <fsm_manual_run+0x268>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a6f      	ldr	r2, [pc, #444]	; (8000e7c <fsm_manual_run+0x268>)
 8000cc0:	6013      	str	r3, [r2, #0]
			if (red_s >= 100){
 8000cc2:	4b6e      	ldr	r3, [pc, #440]	; (8000e7c <fsm_manual_run+0x268>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b63      	cmp	r3, #99	; 0x63
 8000cc8:	dd02      	ble.n	8000cd0 <fsm_manual_run+0xbc>
				red_s = 1;
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <fsm_manual_run+0x268>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
			updateBuffer(red_s, 2);
 8000cd0:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <fsm_manual_run+0x268>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd10 	bl	80006fc <updateBuffer>
		if (isButtonPressed(2)){
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f000 f955 	bl	8000f8c <isButtonPressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80bb 	beq.w	8000e60 <fsm_manual_run+0x24c>
			red_duration = red_s * 1000;
 8000cea:	4b64      	ldr	r3, [pc, #400]	; (8000e7c <fsm_manual_run+0x268>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	4a62      	ldr	r2, [pc, #392]	; (8000e80 <fsm_manual_run+0x26c>)
 8000cf8:	6013      	str	r3, [r2, #0]
		break;
 8000cfa:	e0b1      	b.n	8000e60 <fsm_manual_run+0x24c>
		if (timerFlag[TOP_BOTTOM] == 1){
 8000cfc:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <fsm_manual_run+0x260>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d108      	bne.n	8000d16 <fsm_manual_run+0x102>
			blinkLEDs(TOP_BOTTOM, AMBER);
 8000d04:	2106      	movs	r1, #6
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fa60 	bl	80001cc <blinkLEDs>
			setTimer(TOP_BOTTOM, 500);
 8000d0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d10:	2000      	movs	r0, #0
 8000d12:	f000 fac9 	bl	80012a8 <setTimer>
		if (timerFlag[LEFT_RIGHT] == 1){
 8000d16:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <fsm_manual_run+0x260>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d108      	bne.n	8000d30 <fsm_manual_run+0x11c>
			blinkLEDs(LEFT_RIGHT, AMBER);
 8000d1e:	2106      	movs	r1, #6
 8000d20:	2001      	movs	r0, #1
 8000d22:	f7ff fa53 	bl	80001cc <blinkLEDs>
			setTimer(LEFT_RIGHT, 500);
 8000d26:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fabc 	bl	80012a8 <setTimer>
		if (isButtonPressed(0)){
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f92b 	bl	8000f8c <isButtonPressed>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01c      	beq.n	8000d76 <fsm_manual_run+0x162>
			clearAllLEDs();
 8000d3c:	f7ff fa3a 	bl	80001b4 <clearAllLEDs>
			status = GREEN_MOD;
 8000d40:	4b4b      	ldr	r3, [pc, #300]	; (8000e70 <fsm_manual_run+0x25c>)
 8000d42:	2211      	movs	r2, #17
 8000d44:	601a      	str	r2, [r3, #0]
			updateBuffer(green_s, 4);
 8000d46:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <fsm_manual_run+0x270>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fcd5 	bl	80006fc <updateBuffer>
			setLEDs(TOP_BOTTOM, GREEN);
 8000d52:	2107      	movs	r1, #7
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff fa8b 	bl	8000270 <setLEDs>
			setLEDs(LEFT_RIGHT, GREEN);
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fa87 	bl	8000270 <setLEDs>
			setTimer(TOP_BOTTOM, 500);
 8000d62:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 fa9e 	bl	80012a8 <setTimer>
			setTimer(LEFT_RIGHT, 500);
 8000d6c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 fa99 	bl	80012a8 <setTimer>
		if (isButtonPressed(1)){
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 f908 	bl	8000f8c <isButtonPressed>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d011      	beq.n	8000da6 <fsm_manual_run+0x192>
			amber_s++;
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <fsm_manual_run+0x264>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <fsm_manual_run+0x264>)
 8000d8a:	6013      	str	r3, [r2, #0]
			if (amber_s >= 100){
 8000d8c:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <fsm_manual_run+0x264>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b63      	cmp	r3, #99	; 0x63
 8000d92:	dd02      	ble.n	8000d9a <fsm_manual_run+0x186>
				amber_s = 1;
 8000d94:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <fsm_manual_run+0x264>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
			updateBuffer(amber_s, 3);
 8000d9a:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <fsm_manual_run+0x264>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2103      	movs	r1, #3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fcab 	bl	80006fc <updateBuffer>
		if (isButtonPressed(2)){
 8000da6:	2002      	movs	r0, #2
 8000da8:	f000 f8f0 	bl	8000f8c <isButtonPressed>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d058      	beq.n	8000e64 <fsm_manual_run+0x250>
			amber_duration = amber_s * 1000;
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <fsm_manual_run+0x264>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	4a32      	ldr	r2, [pc, #200]	; (8000e88 <fsm_manual_run+0x274>)
 8000dc0:	6013      	str	r3, [r2, #0]
		break;
 8000dc2:	e04f      	b.n	8000e64 <fsm_manual_run+0x250>
		if (timerFlag[TOP_BOTTOM] == 1){
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <fsm_manual_run+0x260>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d108      	bne.n	8000dde <fsm_manual_run+0x1ca>
			blinkLEDs(TOP_BOTTOM, GREEN);
 8000dcc:	2107      	movs	r1, #7
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff f9fc 	bl	80001cc <blinkLEDs>
			setTimer(TOP_BOTTOM, 500);
 8000dd4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 fa65 	bl	80012a8 <setTimer>
		if (timerFlag[LEFT_RIGHT] == 1){
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <fsm_manual_run+0x260>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <fsm_manual_run+0x1e4>
			blinkLEDs(LEFT_RIGHT, GREEN);
 8000de6:	2107      	movs	r1, #7
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff f9ef 	bl	80001cc <blinkLEDs>
			setTimer(LEFT_RIGHT, 500);
 8000dee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 fa58 	bl	80012a8 <setTimer>
		if (isButtonPressed(0)){
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 f8c7 	bl	8000f8c <isButtonPressed>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <fsm_manual_run+0x1fa>
			clearAllLEDs();
 8000e04:	f7ff f9d6 	bl	80001b4 <clearAllLEDs>
			status = NORMAL;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <fsm_manual_run+0x25c>)
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1)){
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f000 f8bc 	bl	8000f8c <isButtonPressed>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d011      	beq.n	8000e3e <fsm_manual_run+0x22a>
			green_s++;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <fsm_manual_run+0x270>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <fsm_manual_run+0x270>)
 8000e22:	6013      	str	r3, [r2, #0]
			if (green_s >= 100){
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <fsm_manual_run+0x270>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b63      	cmp	r3, #99	; 0x63
 8000e2a:	dd02      	ble.n	8000e32 <fsm_manual_run+0x21e>
				green_s = 1;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <fsm_manual_run+0x270>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
			updateBuffer(green_s, 4);
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <fsm_manual_run+0x270>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2104      	movs	r1, #4
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fc5f 	bl	80006fc <updateBuffer>
		if (isButtonPressed(2)){
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f000 f8a4 	bl	8000f8c <isButtonPressed>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00e      	beq.n	8000e68 <fsm_manual_run+0x254>
			green_duration = green_s * 1000;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <fsm_manual_run+0x270>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <fsm_manual_run+0x278>)
 8000e58:	6013      	str	r3, [r2, #0]
		break;
 8000e5a:	e005      	b.n	8000e68 <fsm_manual_run+0x254>
		break;
 8000e5c:	bf00      	nop
 8000e5e:	e004      	b.n	8000e6a <fsm_manual_run+0x256>
		break;
 8000e60:	bf00      	nop
 8000e62:	e002      	b.n	8000e6a <fsm_manual_run+0x256>
		break;
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <fsm_manual_run+0x256>
		break;
 8000e68:	bf00      	nop
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	2000009c 	.word	0x2000009c
 8000e78:	200000ac 	.word	0x200000ac
 8000e7c:	200000b0 	.word	0x200000b0
 8000e80:	20000004 	.word	0x20000004
 8000e84:	200000b4 	.word	0x200000b4
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	2000000c 	.word	0x2000000c

08000e90 <button_reading>:
int buttonFlag[NO_OF_BUTTONS] = {0};

GPIO_TypeDef* port[NO_OF_BUTTONS] = {Button1_GPIO_Port, Button2_GPIO_Port, Button3_GPIO_Port};
uint16_t pin[NO_OF_BUTTONS] = {Button1_Pin, Button2_Pin, Button3_Pin};

void button_reading(){
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
	for(char i = 0; i < NO_OF_BUTTONS; i ++){
 8000e96:	2300      	movs	r3, #0
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	e05f      	b.n	8000f5c <button_reading+0xcc>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4932      	ldr	r1, [pc, #200]	; (8000f6c <button_reading+0xdc>)
 8000ea2:	5c89      	ldrb	r1, [r1, r2]
 8000ea4:	4a32      	ldr	r2, [pc, #200]	; (8000f70 <button_reading+0xe0>)
 8000ea6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4931      	ldr	r1, [pc, #196]	; (8000f74 <button_reading+0xe4>)
 8000eae:	5c89      	ldrb	r1, [r1, r2]
 8000eb0:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <button_reading+0xdc>)
 8000eb2:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(port[i], pin[i]);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <button_reading+0xe8>)
 8000eb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	492f      	ldr	r1, [pc, #188]	; (8000f7c <button_reading+0xec>)
 8000ec0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ec4:	79fc      	ldrb	r4, [r7, #7]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f000 fe39 	bl	8001b40 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <button_reading+0xe4>)
 8000ed4:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer3[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer1[i]){
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	4a25      	ldr	r2, [pc, #148]	; (8000f70 <button_reading+0xe0>)
 8000eda:	5cd2      	ldrb	r2, [r2, r3]
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4923      	ldr	r1, [pc, #140]	; (8000f6c <button_reading+0xdc>)
 8000ee0:	5ccb      	ldrb	r3, [r1, r3]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d137      	bne.n	8000f56 <button_reading+0xc6>
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <button_reading+0xdc>)
 8000eea:	5cd2      	ldrb	r2, [r2, r3]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4921      	ldr	r1, [pc, #132]	; (8000f74 <button_reading+0xe4>)
 8000ef0:	5ccb      	ldrb	r3, [r1, r3]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d12f      	bne.n	8000f56 <button_reading+0xc6>
			if (buttonBuffer[i] != debounceButtonBuffer1[i]){
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <button_reading+0xf0>)
 8000efa:	5cd2      	ldrb	r2, [r2, r3]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	491d      	ldr	r1, [pc, #116]	; (8000f74 <button_reading+0xe4>)
 8000f00:	5ccb      	ldrb	r3, [r1, r3]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d015      	beq.n	8000f32 <button_reading+0xa2>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	491a      	ldr	r1, [pc, #104]	; (8000f74 <button_reading+0xe4>)
 8000f0c:	5c89      	ldrb	r1, [r1, r2]
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <button_reading+0xf0>)
 8000f10:	54d1      	strb	r1, [r2, r3]
				if (buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <button_reading+0xf0>)
 8000f16:	5cd3      	ldrb	r3, [r2, r3]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d11c      	bne.n	8000f56 <button_reading+0xc6>
					buttonFlag[i] = 1;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <button_reading+0xf4>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeOut[i] = 100;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <button_reading+0xf8>)
 8000f2a:	2164      	movs	r1, #100	; 0x64
 8000f2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f30:	e011      	b.n	8000f56 <button_reading+0xc6>
				}
			}
			else {
				timeOut[i]--;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <button_reading+0xf8>)
 8000f36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	4912      	ldr	r1, [pc, #72]	; (8000f88 <button_reading+0xf8>)
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeOut[i] <= 0){
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <button_reading+0xf8>)
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dc03      	bgt.n	8000f56 <button_reading+0xc6>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <button_reading+0xf0>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	54d1      	strb	r1, [r2, r3]
	for(char i = 0; i < NO_OF_BUTTONS; i ++){
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d99c      	bls.n	8000e9c <button_reading+0xc>
				}
			}
		}
	}
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	2000006c 	.word	0x2000006c
 8000f70:	20000070 	.word	0x20000070
 8000f74:	20000068 	.word	0x20000068
 8000f78:	20000014 	.word	0x20000014
 8000f7c:	20000020 	.word	0x20000020
 8000f80:	20000010 	.word	0x20000010
 8000f84:	20000080 	.word	0x20000080
 8000f88:	20000074 	.word	0x20000074

08000f8c <isButtonPressed>:

int isButtonPressed(int index){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	if(index >= NO_OF_BUTTONS) return 0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	dd01      	ble.n	8000f9e <isButtonPressed+0x12>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e00d      	b.n	8000fba <isButtonPressed+0x2e>
	if (buttonFlag[index] == 1){
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <isButtonPressed+0x38>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d106      	bne.n	8000fb8 <isButtonPressed+0x2c>
		buttonFlag[index] = 0;
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <isButtonPressed+0x38>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <isButtonPressed+0x2e>
	}
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000080 	.word	0x20000080

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 facd 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f825 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 f8ab 	bl	8001130 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fda:	f000 f85d 	bl	8001098 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <main+0x50>)
 8000fe0:	f001 fa2e 	bl	8002440 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int index = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  fsm_automatic_run();
 8000fe8:	f7ff fbc4 	bl	8000774 <fsm_automatic_run>
	  fsm_manual_run();
 8000fec:	f7ff fe12 	bl	8000c14 <fsm_manual_run>
	  if (timer7SEG == 1){
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <main+0x54>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d1f7      	bne.n	8000fe8 <main+0x20>
		  if (index == 4) index = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d101      	bne.n	8001002 <main+0x3a>
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
		  update7SEG(index++);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa17 	bl	800043c <update7SEG>
		  setTimer7SEG(50);
 800100e:	2032      	movs	r0, #50	; 0x32
 8001010:	f000 f912 	bl	8001238 <setTimer7SEG>
	  fsm_automatic_run();
 8001014:	e7e8      	b.n	8000fe8 <main+0x20>
 8001016:	bf00      	nop
 8001018:	200000b8 	.word	0x200000b8
 800101c:	2000008c 	.word	0x2000008c

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b090      	sub	sp, #64	; 0x40
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	2228      	movs	r2, #40	; 0x28
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fdbe 	bl	8002bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001046:	2301      	movs	r3, #1
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fdba 	bl	8001bd0 <HAL_RCC_OscConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001062:	f000 f8e3 	bl	800122c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	230f      	movs	r3, #15
 8001068:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f001 f826 	bl	80020d0 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800108a:	f000 f8cf 	bl	800122c <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3740      	adds	r7, #64	; 0x40
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_TIM2_Init+0x94>)
 80010b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_TIM2_Init+0x94>)
 80010be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_TIM2_Init+0x94>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_TIM2_Init+0x94>)
 80010cc:	2209      	movs	r2, #9
 80010ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_TIM2_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_TIM2_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010dc:	4813      	ldr	r0, [pc, #76]	; (800112c <MX_TIM2_Init+0x94>)
 80010de:	f001 f95f 	bl	80023a0 <HAL_TIM_Base_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010e8:	f000 f8a0 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_TIM2_Init+0x94>)
 80010fa:	f001 faf5 	bl	80026e8 <HAL_TIM_ConfigClockSource>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001104:	f000 f892 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_TIM2_Init+0x94>)
 8001116:	f001 fcbd 	bl	8002a94 <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001120:	f000 f884 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200000b8 	.word	0x200000b8

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b35      	ldr	r3, [pc, #212]	; (800121c <MX_GPIO_Init+0xec>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a34      	ldr	r2, [pc, #208]	; (800121c <MX_GPIO_Init+0xec>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <MX_GPIO_Init+0xec>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <MX_GPIO_Init+0xec>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a2e      	ldr	r2, [pc, #184]	; (800121c <MX_GPIO_Init+0xec>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <MX_GPIO_Init+0xec>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <MX_GPIO_Init+0xec>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a28      	ldr	r2, [pc, #160]	; (800121c <MX_GPIO_Init+0xec>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_GPIO_Init+0xec>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Test_Pin|RED_1_Pin|AMBER_1_Pin|GREEN_1_Pin
 800118c:	2200      	movs	r2, #0
 800118e:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <MX_GPIO_Init+0xf0>)
 8001194:	f000 fceb 	bl	8001b6e <HAL_GPIO_WritePin>
                          |RED_2_Pin|AMBER_2_Pin|GREEN_2_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG2_3_Pin
 8001198:	2200      	movs	r2, #0
 800119a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800119e:	4821      	ldr	r0, [pc, #132]	; (8001224 <MX_GPIO_Init+0xf4>)
 80011a0:	f000 fce5 	bl	8001b6e <HAL_GPIO_WritePin>
                          |SEG2_4_Pin|SEG2_5_Pin|SEG2_6_Pin|SEG1_3_Pin
                          |SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin|SEG2_0_Pin
                          |SEG2_1_Pin|SEG2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80011a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	481b      	ldr	r0, [pc, #108]	; (8001228 <MX_GPIO_Init+0xf8>)
 80011ba:	f000 fb47 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 80011be:	230a      	movs	r3, #10
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <MX_GPIO_Init+0xf0>)
 80011d2:	f000 fb3b 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_Pin RED_1_Pin AMBER_1_Pin GREEN_1_Pin
                           RED_2_Pin AMBER_2_Pin GREEN_2_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = Test_Pin|RED_1_Pin|AMBER_1_Pin|GREEN_1_Pin
 80011d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011da:	613b      	str	r3, [r7, #16]
                          |RED_2_Pin|AMBER_2_Pin|GREEN_2_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <MX_GPIO_Init+0xf0>)
 80011f0:	f000 fb2c 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_0_Pin SEG1_1_Pin SEG1_2_Pin SEG2_3_Pin
                           SEG2_4_Pin SEG2_5_Pin SEG2_6_Pin SEG1_3_Pin
                           SEG1_4_Pin SEG1_5_Pin SEG1_6_Pin SEG2_0_Pin
                           SEG2_1_Pin SEG2_2_Pin */
  GPIO_InitStruct.Pin = SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG2_3_Pin
 80011f4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80011f8:	613b      	str	r3, [r7, #16]
                          |SEG2_4_Pin|SEG2_5_Pin|SEG2_6_Pin|SEG1_3_Pin
                          |SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin|SEG2_0_Pin
                          |SEG2_1_Pin|SEG2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2302      	movs	r3, #2
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_GPIO_Init+0xf4>)
 800120e:	f000 fb1d 	bl	800184c <HAL_GPIO_Init>

}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40010800 	.word	0x40010800
 8001224:	40010c00 	.word	0x40010c00
 8001228:	40011000 	.word	0x40011000

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <setTimer7SEG>:
int counterSecond = 0;

int timerFlag[NO_OF_COUNTERS] = {0, 0};
int counter[NO_OF_COUNTERS] = {0, 0};

void setTimer7SEG(int duration){
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	counter7SEG = duration/PERIOD;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <setTimer7SEG+0x2c>)
 8001244:	fb82 1203 	smull	r1, r2, r2, r3
 8001248:	1092      	asrs	r2, r2, #2
 800124a:	17db      	asrs	r3, r3, #31
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	4a06      	ldr	r2, [pc, #24]	; (8001268 <setTimer7SEG+0x30>)
 8001250:	6013      	str	r3, [r2, #0]
	timer7SEG = 0;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <setTimer7SEG+0x34>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	66666667 	.word	0x66666667
 8001268:	20000090 	.word	0x20000090
 800126c:	2000008c 	.word	0x2000008c

08001270 <setTimerSecond>:

void setTimerSecond(int duration){
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	counterSecond = duration/PERIOD;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <setTimerSecond+0x2c>)
 800127c:	fb82 1203 	smull	r1, r2, r2, r3
 8001280:	1092      	asrs	r2, r2, #2
 8001282:	17db      	asrs	r3, r3, #31
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <setTimerSecond+0x30>)
 8001288:	6013      	str	r3, [r2, #0]
	timerSecond = 0;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <setTimerSecond+0x34>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	66666667 	.word	0x66666667
 80012a0:	20000098 	.word	0x20000098
 80012a4:	20000094 	.word	0x20000094

080012a8 <setTimer>:

void setTimer(int index, int duration){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	counter[index] = duration/PERIOD;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	4a09      	ldr	r2, [pc, #36]	; (80012dc <setTimer+0x34>)
 80012b6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ba:	1092      	asrs	r2, r2, #2
 80012bc:	17db      	asrs	r3, r3, #31
 80012be:	1ad2      	subs	r2, r2, r3
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <setTimer+0x38>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[index] = 0;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <setTimer+0x3c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2100      	movs	r1, #0
 80012ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	66666667 	.word	0x66666667
 80012e0:	200000a4 	.word	0x200000a4
 80012e4:	2000009c 	.word	0x2000009c

080012e8 <timerRun>:

void timerRun(){
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	e01c      	b.n	800132e <timerRun+0x46>
		if (counter[i] > 0){
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <timerRun+0x58>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dd13      	ble.n	8001328 <timerRun+0x40>
			counter[i]--;
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <timerRun+0x58>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <timerRun+0x58>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (counter[i] <= 0){
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <timerRun+0x58>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	2b00      	cmp	r3, #0
 800131c:	dc04      	bgt.n	8001328 <timerRun+0x40>
				timerFlag[i] = 1;
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <timerRun+0x5c>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2101      	movs	r1, #1
 8001324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	dddf      	ble.n	80012f4 <timerRun+0xc>
			}
		}
	}
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200000a4 	.word	0x200000a4
 8001344:	2000009c 	.word	0x2000009c

08001348 <timerRunSecond>:

void timerRunSecond(){
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	if (counterSecond > 0){
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <timerRunSecond+0x2c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	dd0b      	ble.n	800136c <timerRunSecond+0x24>
		counterSecond--;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <timerRunSecond+0x2c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3b01      	subs	r3, #1
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <timerRunSecond+0x2c>)
 800135c:	6013      	str	r3, [r2, #0]
		if (counterSecond <= 0){
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <timerRunSecond+0x2c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	dc02      	bgt.n	800136c <timerRunSecond+0x24>
			timerSecond = 1;
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <timerRunSecond+0x30>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000098 	.word	0x20000098
 8001378:	20000094 	.word	0x20000094

0800137c <timerRun7SEG>:

void timerRun7SEG(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	if (counter7SEG > 0){
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <timerRun7SEG+0x2c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dd0b      	ble.n	80013a0 <timerRun7SEG+0x24>
		counter7SEG--;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <timerRun7SEG+0x2c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <timerRun7SEG+0x2c>)
 8001390:	6013      	str	r3, [r2, #0]
		if (counter7SEG <= 0){
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <timerRun7SEG+0x2c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dc02      	bgt.n	80013a0 <timerRun7SEG+0x24>
			timer7SEG = 1;
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <timerRun7SEG+0x30>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000090 	.word	0x20000090
 80013ac:	2000008c 	.word	0x2000008c

080013b0 <HAL_TIM_PeriodElapsedCallback>:

int cnt = 100;
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c0:	d117      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x42>
		timerRun();
 80013c2:	f7ff ff91 	bl	80012e8 <timerRun>
		timerRun7SEG();
 80013c6:	f7ff ffd9 	bl	800137c <timerRun7SEG>
		timerRunSecond();
 80013ca:	f7ff ffbd 	bl	8001348 <timerRunSecond>
		button_reading();
 80013ce:	f7ff fd5f 	bl	8000e90 <button_reading>
		cnt--;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013da:	6013      	str	r3, [r2, #0]
		if (cnt <= 0){
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dc06      	bgt.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x42>
			cnt = 100;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, Test_Pin);
 80013ea:	2110      	movs	r1, #16
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013ee:	f000 fbd6 	bl	8001b9e <HAL_GPIO_TogglePin>
		}
	}
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000028 	.word	0x20000028
 8001400:	40010800 	.word	0x40010800

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_MspInit+0x5c>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_MspInit+0x5c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_MspInit+0x5c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_MspInit+0x5c>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_MspInit+0x5c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_MspInit+0x5c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_MspInit+0x60>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_MspInit+0x60>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001478:	d113      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	201c      	movs	r0, #28
 8001498:	f000 f9a1 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800149c:	201c      	movs	r0, #28
 800149e:	f000 f9ba 	bl	8001816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f87f 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM2_IRQHandler+0x10>)
 8001506:	f000 ffe7 	bl	80024d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000b8 	.word	0x200000b8

08001514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001546:	f7ff ffe5 	bl	8001514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f001 fb0d 	bl	8002b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154e:	f7ff fd3b 	bl	8000fc8 <main>
  bx lr
 8001552:	4770      	bx	lr
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800155c:	08002c00 	.word	0x08002c00
  ldr r2, =_sbss
 8001560:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001564:	20000104 	.word	0x20000104

08001568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x28>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f923 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff ff3c 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f93b 	bl	8001832 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 f903 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000002c 	.word	0x2000002c
 80015f0:	20000034 	.word	0x20000034
 80015f4:	20000030 	.word	0x20000030

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <HAL_IncTick+0x20>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000034 	.word	0x20000034
 8001618:	20000100 	.word	0x20000100

0800161c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_GetTick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000100 	.word	0x20000100

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4906      	ldr	r1, [pc, #24]	; (80016c8 <__NVIC_EnableIRQ+0x34>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff90 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff2d 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff42 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff90 	bl	8001720 <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5f 	bl	80016cc <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff35 	bl	8001694 <__NVIC_EnableIRQ>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffa2 	bl	8001784 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e148      	b.n	8001af2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8137 	bne.w	8001aec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4aa3      	ldr	r2, [pc, #652]	; (8001b10 <HAL_GPIO_Init+0x2c4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d05e      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001888:	4aa1      	ldr	r2, [pc, #644]	; (8001b10 <HAL_GPIO_Init+0x2c4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d875      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800188e:	4aa1      	ldr	r2, [pc, #644]	; (8001b14 <HAL_GPIO_Init+0x2c8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d058      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001894:	4a9f      	ldr	r2, [pc, #636]	; (8001b14 <HAL_GPIO_Init+0x2c8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d86f      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800189a:	4a9f      	ldr	r2, [pc, #636]	; (8001b18 <HAL_GPIO_Init+0x2cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d052      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018a0:	4a9d      	ldr	r2, [pc, #628]	; (8001b18 <HAL_GPIO_Init+0x2cc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d869      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018a6:	4a9d      	ldr	r2, [pc, #628]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d04c      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018ac:	4a9b      	ldr	r2, [pc, #620]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d863      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018b2:	4a9b      	ldr	r2, [pc, #620]	; (8001b20 <HAL_GPIO_Init+0x2d4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d046      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018b8:	4a99      	ldr	r2, [pc, #612]	; (8001b20 <HAL_GPIO_Init+0x2d4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d85d      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d82a      	bhi.n	8001918 <HAL_GPIO_Init+0xcc>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d859      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <HAL_GPIO_Init+0x80>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001921 	.word	0x08001921
 80018d4:	08001933 	.word	0x08001933
 80018d8:	08001975 	.word	0x08001975
 80018dc:	0800197b 	.word	0x0800197b
 80018e0:	0800197b 	.word	0x0800197b
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	0800197b 	.word	0x0800197b
 80018ec:	0800197b 	.word	0x0800197b
 80018f0:	0800197b 	.word	0x0800197b
 80018f4:	0800197b 	.word	0x0800197b
 80018f8:	0800197b 	.word	0x0800197b
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	0800197b 	.word	0x0800197b
 8001904:	0800197b 	.word	0x0800197b
 8001908:	0800197b 	.word	0x0800197b
 800190c:	0800197b 	.word	0x0800197b
 8001910:	08001929 	.word	0x08001929
 8001914:	0800193d 	.word	0x0800193d
 8001918:	4a82      	ldr	r2, [pc, #520]	; (8001b24 <HAL_GPIO_Init+0x2d8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191e:	e02c      	b.n	800197a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e029      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e024      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	3308      	adds	r3, #8
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e01f      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	330c      	adds	r3, #12
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e01a      	b.n	800197c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194e:	2304      	movs	r3, #4
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e013      	b.n	800197c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	611a      	str	r2, [r3, #16]
          break;
 8001966:	e009      	b.n	800197c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	615a      	str	r2, [r3, #20]
          break;
 8001972:	e003      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x130>
          break;
 800197a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d801      	bhi.n	8001986 <HAL_GPIO_Init+0x13a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e001      	b.n	800198a <HAL_GPIO_Init+0x13e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d802      	bhi.n	8001998 <HAL_GPIO_Init+0x14c>
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x152>
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3b08      	subs	r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	210f      	movs	r1, #15
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	6a39      	ldr	r1, [r7, #32]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8090 	beq.w	8001aec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019cc:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <HAL_GPIO_Init+0x2dc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a55      	ldr	r2, [pc, #340]	; (8001b28 <HAL_GPIO_Init+0x2dc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_GPIO_Init+0x2dc>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e4:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_GPIO_Init+0x2e0>)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <HAL_GPIO_Init+0x2e4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00d      	beq.n	8001a2c <HAL_GPIO_Init+0x1e0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d007      	beq.n	8001a28 <HAL_GPIO_Init+0x1dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_GPIO_Init+0x2ec>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d101      	bne.n	8001a24 <HAL_GPIO_Init+0x1d8>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a24:	2303      	movs	r3, #3
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3e:	493b      	ldr	r1, [pc, #236]	; (8001b2c <HAL_GPIO_Init+0x2e0>)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4937      	ldr	r1, [pc, #220]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4933      	ldr	r1, [pc, #204]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	492d      	ldr	r1, [pc, #180]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4929      	ldr	r1, [pc, #164]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	4923      	ldr	r1, [pc, #140]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	491f      	ldr	r1, [pc, #124]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4919      	ldr	r1, [pc, #100]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4915      	ldr	r1, [pc, #84]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	3301      	adds	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f47f aeaf 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	372c      	adds	r7, #44	; 0x2c
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	10320000 	.word	0x10320000
 8001b14:	10310000 	.word	0x10310000
 8001b18:	10220000 	.word	0x10220000
 8001b1c:	10210000 	.word	0x10210000
 8001b20:	10120000 	.word	0x10120000
 8001b24:	10110000 	.word	0x10110000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40010800 	.word	0x40010800
 8001b34:	40010c00 	.word	0x40010c00
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	807b      	strh	r3, [r7, #2]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7e:	787b      	ldrb	r3, [r7, #1]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b84:	887a      	ldrh	r2, [r7, #2]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	041a      	lsls	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	041a      	lsls	r2, r3, #16
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e26c      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8087 	beq.w	8001cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf0:	4b92      	ldr	r3, [pc, #584]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d00c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfc:	4b8f      	ldr	r3, [pc, #572]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d112      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5e>
 8001c08:	4b8c      	ldr	r3, [pc, #560]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c14:	d10b      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c16:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d06c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x12c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d168      	bne.n	8001cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e246      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x76>
 8001c38:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a7f      	ldr	r2, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e02e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7a      	ldr	r2, [pc, #488]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b78      	ldr	r3, [pc, #480]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a77      	ldr	r2, [pc, #476]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0xbc>
 8001c72:	4b72      	ldr	r3, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a71      	ldr	r2, [pc, #452]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6e      	ldr	r2, [pc, #440]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c8c:	4b6b      	ldr	r3, [pc, #428]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a67      	ldr	r2, [pc, #412]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fcb6 	bl	800161c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fcb2 	bl	800161c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1fa      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe4>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fca2 	bl	800161c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fc9e 	bl	800161c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1e6      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x10c>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d16:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x18c>
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x176>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1ba      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4939      	ldr	r1, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_RCC_OscConfig+0x270>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fc57 	bl	800161c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fc53 	bl	800161c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e19b      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4927      	ldr	r1, [pc, #156]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_RCC_OscConfig+0x270>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fc36 	bl	800161c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fc32 	bl	800161c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e17a      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03a      	beq.n	8001e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d019      	beq.n	8001e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fc16 	bl	800161c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc12 	bl	800161c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e15a      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f000 faa6 	bl	8002364 <RCC_Delay>
 8001e18:	e01c      	b.n	8001e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7ff fbfc 	bl	800161c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fbf8 	bl	800161c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d908      	bls.n	8001e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e140      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	42420000 	.word	0x42420000
 8001e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	4b9e      	ldr	r3, [pc, #632]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e9      	bne.n	8001e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a6 	beq.w	8001fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b97      	ldr	r3, [pc, #604]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b94      	ldr	r3, [pc, #592]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a93      	ldr	r2, [pc, #588]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b91      	ldr	r3, [pc, #580]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b8e      	ldr	r3, [pc, #568]	; (80020c8 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a8a      	ldr	r2, [pc, #552]	; (80020c8 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fbb9 	bl	800161c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7ff fbb5 	bl	800161c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0fd      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <HAL_RCC_OscConfig+0x4f8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x312>
 8001ed4:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a7a      	ldr	r2, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	e02d      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x334>
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a75      	ldr	r2, [pc, #468]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b73      	ldr	r3, [pc, #460]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a72      	ldr	r2, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	e01c      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x356>
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a6c      	ldr	r2, [pc, #432]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	e00b      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a63      	ldr	r2, [pc, #396]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 0304 	bic.w	r3, r3, #4
 8001f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d015      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fb69 	bl	800161c <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fb65 	bl	800161c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0ab      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	4b57      	ldr	r3, [pc, #348]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ee      	beq.n	8001f4e <HAL_RCC_OscConfig+0x37e>
 8001f70:	e014      	b.n	8001f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff fb53 	bl	800161c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fb4f 	bl	800161c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e095      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8081 	beq.w	80020ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb8:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d061      	beq.n	8002088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d146      	bne.n	800205a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0x4fc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fb23 	bl	800161c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff fb1f 	bl	800161c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e067      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	492d      	ldr	r1, [pc, #180]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a19      	ldr	r1, [r3, #32]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	430b      	orrs	r3, r1
 8002026:	4927      	ldr	r1, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_OscConfig+0x4fc>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff faf3 	bl	800161c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7ff faef 	bl	800161c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e037      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x46a>
 8002058:	e02f      	b.n	80020ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <HAL_RCC_OscConfig+0x4fc>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fadc 	bl	800161c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff fad8 	bl	800161c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e020      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x498>
 8002086:	e018      	b.n	80020ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e013      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40007000 	.word	0x40007000
 80020cc:	42420060 	.word	0x42420060

080020d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d0      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d910      	bls.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4965      	ldr	r1, [pc, #404]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0b8      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800214e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	494d      	ldr	r1, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d040      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e07f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e073      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06b      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4936      	ldr	r1, [pc, #216]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7ff fa2c 	bl	800161c <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7ff fa28 	bl	800161c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e053      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d210      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4922      	ldr	r1, [pc, #136]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e032      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225e:	f000 f821 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	490a      	ldr	r1, [pc, #40]	; (8002298 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1cc>)
 8002278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f98a 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	08002be8 	.word	0x08002be8
 800229c:	2000002c 	.word	0x2000002c
 80022a0:	20000030 	.word	0x20000030

080022a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b490      	push	{r4, r7}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022ac:	1d3c      	adds	r4, r7, #4
 80022ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022b4:	f240 2301 	movw	r3, #513	; 0x201
 80022b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x40>
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x46>
 80022e2:	e02d      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	e02d      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	0c9b      	lsrs	r3, r3, #18
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022f6:	4413      	add	r3, r2
 80022f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	0c5b      	lsrs	r3, r3, #17
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002316:	4413      	add	r3, r2
 8002318:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800231c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002322:	fb02 f203 	mul.w	r2, r2, r3
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	e004      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	623b      	str	r3, [r7, #32]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002342:	623b      	str	r3, [r7, #32]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	6a3b      	ldr	r3, [r7, #32]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bc90      	pop	{r4, r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	08002bd8 	.word	0x08002bd8
 8002358:	40021000 	.word	0x40021000
 800235c:	007a1200 	.word	0x007a1200
 8002360:	003d0900 	.word	0x003d0900

08002364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <RCC_Delay+0x34>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <RCC_Delay+0x38>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0a5b      	lsrs	r3, r3, #9
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002380:	bf00      	nop
  }
  while (Delay --);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	60fa      	str	r2, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f9      	bne.n	8002380 <RCC_Delay+0x1c>
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	2000002c 	.word	0x2000002c
 800239c:	10624dd3 	.word	0x10624dd3

080023a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e041      	b.n	8002436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff f84e 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f000 fa6a 	bl	80028b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d001      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e035      	b.n	80024c4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_TIM_Base_Start_IT+0x4e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002482:	d004      	beq.n	800248e <HAL_TIM_Base_Start_IT+0x4e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_TIM_Base_Start_IT+0x94>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d111      	bne.n	80024b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d010      	beq.n	80024c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b0:	e007      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40000400 	.word	0x40000400

080024d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d122      	bne.n	8002534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d11b      	bne.n	8002534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0202 	mvn.w	r2, #2
 8002504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f9b1 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f9a4 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f9b3 	bl	8002894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d122      	bne.n	8002588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b04      	cmp	r3, #4
 800254e:	d11b      	bne.n	8002588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0204 	mvn.w	r2, #4
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f987 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f97a 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f989 	bl	8002894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	d122      	bne.n	80025dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d11b      	bne.n	80025dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0208 	mvn.w	r2, #8
 80025ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2204      	movs	r2, #4
 80025b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f95d 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f950 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f95f 	bl	8002894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d122      	bne.n	8002630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b10      	cmp	r3, #16
 80025f6:	d11b      	bne.n	8002630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0210 	mvn.w	r2, #16
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2208      	movs	r2, #8
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f933 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f926 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f935 	bl	8002894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0201 	mvn.w	r2, #1
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe feaa 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b80      	cmp	r3, #128	; 0x80
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa67 	bl	8002b56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8f9 	bl	80028a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0220 	mvn.w	r2, #32
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa32 	bl	8002b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_TIM_ConfigClockSource+0x18>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e0b3      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x180>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800271e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002726:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002738:	d03e      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0xd0>
 800273a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273e:	f200 8087 	bhi.w	8002850 <HAL_TIM_ConfigClockSource+0x168>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	f000 8085 	beq.w	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800274a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274e:	d87f      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x168>
 8002750:	2b70      	cmp	r3, #112	; 0x70
 8002752:	d01a      	beq.n	800278a <HAL_TIM_ConfigClockSource+0xa2>
 8002754:	2b70      	cmp	r3, #112	; 0x70
 8002756:	d87b      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x168>
 8002758:	2b60      	cmp	r3, #96	; 0x60
 800275a:	d050      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x116>
 800275c:	2b60      	cmp	r3, #96	; 0x60
 800275e:	d877      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x168>
 8002760:	2b50      	cmp	r3, #80	; 0x50
 8002762:	d03c      	beq.n	80027de <HAL_TIM_ConfigClockSource+0xf6>
 8002764:	2b50      	cmp	r3, #80	; 0x50
 8002766:	d873      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x168>
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d058      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x136>
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d86f      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x168>
 8002770:	2b30      	cmp	r3, #48	; 0x30
 8002772:	d064      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x156>
 8002774:	2b30      	cmp	r3, #48	; 0x30
 8002776:	d86b      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x168>
 8002778:	2b20      	cmp	r3, #32
 800277a:	d060      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x156>
 800277c:	2b20      	cmp	r3, #32
 800277e:	d867      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x168>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x156>
 8002784:	2b10      	cmp	r3, #16
 8002786:	d05a      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002788:	e062      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f000 f95c 	bl	8002a56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	609a      	str	r2, [r3, #8]
      break;
 80027b6:	e04e      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f000 f945 	bl	8002a56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027da:	609a      	str	r2, [r3, #8]
      break;
 80027dc:	e03b      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	461a      	mov	r2, r3
 80027ec:	f000 f8bc 	bl	8002968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2150      	movs	r1, #80	; 0x50
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f913 	bl	8002a22 <TIM_ITRx_SetConfig>
      break;
 80027fc:	e02b      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	461a      	mov	r2, r3
 800280c:	f000 f8da 	bl	80029c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2160      	movs	r1, #96	; 0x60
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f903 	bl	8002a22 <TIM_ITRx_SetConfig>
      break;
 800281c:	e01b      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	461a      	mov	r2, r3
 800282c:	f000 f89c 	bl	8002968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2140      	movs	r1, #64	; 0x40
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f8f3 	bl	8002a22 <TIM_ITRx_SetConfig>
      break;
 800283c:	e00b      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f000 f8ea 	bl	8002a22 <TIM_ITRx_SetConfig>
        break;
 800284e:	e002      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002854:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a25      	ldr	r2, [pc, #148]	; (8002960 <TIM_Base_SetConfig+0xa8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <TIM_Base_SetConfig+0x28>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d6:	d003      	beq.n	80028e0 <TIM_Base_SetConfig+0x28>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a22      	ldr	r2, [pc, #136]	; (8002964 <TIM_Base_SetConfig+0xac>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d108      	bne.n	80028f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <TIM_Base_SetConfig+0xa8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d007      	beq.n	800290a <TIM_Base_SetConfig+0x52>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002900:	d003      	beq.n	800290a <TIM_Base_SetConfig+0x52>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a17      	ldr	r2, [pc, #92]	; (8002964 <TIM_Base_SetConfig+0xac>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d108      	bne.n	800291c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <TIM_Base_SetConfig+0xa8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d103      	bne.n	8002950 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	615a      	str	r2, [r3, #20]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400

08002968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f023 0201 	bic.w	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f023 030a 	bic.w	r3, r3, #10
 80029a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	621a      	str	r2, [r3, #32]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 0210 	bic.w	r2, r3, #16
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	031b      	lsls	r3, r3, #12
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	621a      	str	r2, [r3, #32]
}
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f043 0307 	orr.w	r3, r3, #7
 8002a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	609a      	str	r2, [r3, #8]
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e041      	b.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d009      	beq.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d004      	beq.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10c      	bne.n	8002b1e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40000400 	.word	0x40000400

08002b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <__libc_init_array>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ba0 <__libc_init_array+0x38>)
 8002b6e:	4c0d      	ldr	r4, [pc, #52]	; (8002ba4 <__libc_init_array+0x3c>)
 8002b70:	1b64      	subs	r4, r4, r5
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	42a6      	cmp	r6, r4
 8002b76:	d109      	bne.n	8002b8c <__libc_init_array+0x24>
 8002b78:	f000 f822 	bl	8002bc0 <_init>
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	4d0a      	ldr	r5, [pc, #40]	; (8002ba8 <__libc_init_array+0x40>)
 8002b80:	4c0a      	ldr	r4, [pc, #40]	; (8002bac <__libc_init_array+0x44>)
 8002b82:	1b64      	subs	r4, r4, r5
 8002b84:	10a4      	asrs	r4, r4, #2
 8002b86:	42a6      	cmp	r6, r4
 8002b88:	d105      	bne.n	8002b96 <__libc_init_array+0x2e>
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b90:	4798      	blx	r3
 8002b92:	3601      	adds	r6, #1
 8002b94:	e7ee      	b.n	8002b74 <__libc_init_array+0xc>
 8002b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9a:	4798      	blx	r3
 8002b9c:	3601      	adds	r6, #1
 8002b9e:	e7f2      	b.n	8002b86 <__libc_init_array+0x1e>
 8002ba0:	08002bf8 	.word	0x08002bf8
 8002ba4:	08002bf8 	.word	0x08002bf8
 8002ba8:	08002bf8 	.word	0x08002bf8
 8002bac:	08002bfc 	.word	0x08002bfc

08002bb0 <memset>:
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4402      	add	r2, r0
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d100      	bne.n	8002bba <memset+0xa>
 8002bb8:	4770      	bx	lr
 8002bba:	f803 1b01 	strb.w	r1, [r3], #1
 8002bbe:	e7f9      	b.n	8002bb4 <memset+0x4>

08002bc0 <_init>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	bf00      	nop
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr

08002bcc <_fini>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr
